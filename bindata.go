// Code generated by go-bindata.
// sources:
// TemplateApp/.gitignore
// TemplateApp/.jshintrc
// TemplateApp/client/css/app.css
// TemplateApp/client/index.html
// TemplateApp/client/js/actions/AppActions.js
// TemplateApp/client/js/alt.js
// TemplateApp/client/js/app.js
// TemplateApp/client/js/components/AppControllerView.js
// TemplateApp/client/js/components/CounterComp.js
// TemplateApp/client/js/stores/AppStore.js
// TemplateApp/gulpfile.js
// TemplateApp/nodemon.json
// TemplateApp/package.json
// TemplateApp/server/server.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xc9\x2c\x2e\xd1\xe7\xca\xcb\x4f\x49\x8d\xcf\xcd\x4f\x29\xcd\x49\x2d\x06\xf2\x0a\x72\x75\x53\x52\x93\x4a\xd3\xf5\x72\xf2\xd3\xb9\x00\x01\x00\x00\xff\xff\xc8\xb9\x52\xdd\x22\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 34, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _Jshintrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\xd4\xe2\xbc\xd4\x8a\x12\x25\x2b\x85\x92\xa2\xd2\x54\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\xd2\x1e\xd0\xe8\x17\x00\x00\x00")

func JshintrcBytes() ([]byte, error) {
	return bindataRead(
		_Jshintrc,
		".jshintrc",
	)
}

func Jshintrc() (*asset, error) {
	bytes, err := JshintrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".jshintrc", size: 23, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientCssAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func clientCssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_clientCssAppCss,
		"client/css/app.css",
	)
}

func clientCssAppCss() (*asset, error) {
	bytes, err := clientCssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/css/app.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x31\x6f\xc3\x20\x10\x85\xf7\xfc\x8a\x0b\x3b\x66\xad\x2a\x60\x69\x3b\xb7\x43\x96\x8e\x8e\xb9\x08\x52\x6c\x23\xee\x5c\xd5\x8a\xf2\xdf\x8b\x4d\x55\x3b\x0c\xdc\xf1\xee\xf1\xf8\x84\x3e\xbe\xbe\xbf\x9c\x3e\x3f\xde\xc0\x73\x1f\xed\x41\xd7\x02\x65\x69\x8f\xad\xab\xed\x7a\xec\x91\x5b\xe8\x7c\x9b\x09\xd9\x88\x89\x2f\xf2\x49\xec\xc6\x1c\x38\xa2\xbd\xdd\x9a\xd3\xd2\xdc\xef\x5a\x55\x65\x73\xc4\x30\x7c\x41\xc6\x68\x04\xf1\x1c\x91\x3c\x22\x0b\xf0\x19\x2f\x46\xa8\x8e\x48\xb5\x29\x35\xa5\x0a\xe0\x39\xa1\x11\x8c\x3f\xbc\xe8\x7f\xaf\x68\xb5\x01\xe9\xf3\xe8\xe6\x5d\xb4\x0b\xdf\x10\x9c\x11\xfd\x38\x0d\x2c\xd3\x18\x06\x16\x56\xab\x22\xdb\xc3\xe6\x3a\x4a\x09\xe7\x29\x44\xf7\x7c\x25\x90\x72\x77\x9f\xba\x1c\x12\x03\xe5\xae\xa0\x94\x5d\xad\xb6\xe6\x4a\x4b\x4a\x1d\xda\xc7\x1c\x1c\xdc\xea\xf9\xcf\xd1\xaa\x32\x15\xcc\xf5\x0b\x7f\x03\x00\x00\xff\xff\xed\x5a\xf4\x05\x5a\x01\x00\x00")

func clientIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_clientIndexHtml,
		"client/index.html",
	)
}

func clientIndexHtml() (*asset, error) {
	bytes, err := clientIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/index.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1439832357, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsActionsAppactionsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x9b\x93\x21\xce\x01\x3c\x05\x9d\xba\x17\xdd\x19\x85\xb1\x84\xca\x96\x40\x51\x41\x8b\x22\x77\x2f\x65\xcb\x6d\x02\x94\xf0\x20\x9b\xdf\x9f\x4f\x9f\x7e\x4a\x91\x05\x30\x08\x5c\x39\x4e\xd0\xf5\xfd\x51\x5f\xba\xc1\x18\x1b\x30\x67\x38\xa5\x74\xb2\xe2\xe3\x9c\xe1\xdb\x80\x96\xd5\xa3\x70\xb1\x12\x79\xb7\x6f\xdf\x6a\x1d\x8f\x90\xd5\x2d\x7c\xc1\x85\xae\x7e\x26\xb8\xa0\xe0\x21\xa9\xc7\x41\x1c\xc7\x32\xba\x03\x36\x23\x47\x4c\x10\xfc\x07\x81\x38\x9f\x07\x98\x4a\x10\x9f\x02\x01\xf2\x98\x21\xc5\x9c\xfd\x39\xd0\xaf\x73\x15\xf5\x23\xcd\xc4\x28\xd4\x60\x76\x5d\x49\x3a\x80\x5e\x62\x99\x85\xb8\xdb\x0f\x8b\xfc\x6e\x4c\x63\x79\xd3\x9f\x40\x1f\x71\x04\x53\xd4\x79\x14\xf0\x1c\xab\x03\xdc\x88\xb3\x7a\x40\xbc\x2e\xdd\x85\xfa\x1f\x5c\x58\x71\xa1\x4d\xae\xc7\x25\x22\xb5\xb9\xd1\x36\xe6\x55\xc0\x62\x08\x79\x85\xbc\xf8\x9c\x50\xac\xdb\xd9\x15\xeb\x1d\x43\xa1\x7d\xbf\x89\x9f\x90\x9f\x35\x2d\x48\x15\xd5\x62\x92\xc2\x33\x3c\x2a\x86\xad\x7f\x37\x7a\x49\xfa\x5c\xd6\xa6\x49\xa3\x66\x57\xd7\xd7\x5b\xa6\x87\x78\xfe\xd6\xa6\xc9\xfc\x04\x00\x00\xff\xff\x71\xc5\xa0\xdb\xe5\x01\x00\x00")

func clientJsActionsAppactionsJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsActionsAppactionsJs,
		"client/js/actions/AppActions.js",
	)
}

func clientJsActionsAppactionsJs() (*asset, error) {
	bytes, err := clientJsActionsAppactionsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/actions/AppActions.js", size: 485, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsAltJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2d\xc8\x2f\x2a\x51\x70\xcc\x29\x51\x48\x2b\xca\xcf\x55\x50\x4f\xcc\x29\x51\xb7\xe6\xe2\x2a\x4b\x2c\x52\x00\x32\x15\x6c\x15\xf2\x52\xcb\x41\xd2\x1a\x9a\x40\xd1\xd4\x0a\xb0\xea\x94\xd4\xb4\xc4\x52\xa0\x24\x50\x81\x35\x17\x20\x00\x00\xff\xff\xe7\xff\x84\xcc\x42\x00\x00\x00")

func clientJsAltJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsAltJs,
		"client/js/alt.js",
	)
}

func clientJsAltJs() (*asset, error) {
	bytes, err := clientJsAltJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/alt.js", size: 66, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8d\xc1\x0a\xc2\x30\x0c\x86\xef\x79\x8a\xde\xba\x81\x76\x0f\xb0\x31\x50\xf1\xe0\xd5\x83\x77\x69\xa3\x14\xda\xa4\xc4\x0c\xf1\xed\xed\xc6\x6e\xcd\xe9\x27\xf9\xfe\x2f\x31\x17\x16\x35\xa7\x52\x2e\x4c\x2a\x9c\x12\xca\x23\xe2\xd7\xbc\x84\xb3\xb1\x6e\xf0\x5c\x09\x42\xd2\xcf\xd0\x40\x76\x84\xbd\x7f\xc7\xa7\xd7\xbd\x23\x6b\xae\x27\xd8\x96\x4e\x90\x02\x4a\x07\xa6\xce\xd4\x28\xe6\xa9\xd5\xce\x87\x0d\x0e\xec\x97\x5c\x1f\xbb\x37\xea\x35\xe1\x1a\xcf\xbf\x5b\xe8\x6c\xe6\x85\xf4\x58\x38\x92\xda\x1e\xfa\x11\xfe\x01\x00\x00\xff\xff\x39\xff\xcc\x00\xc5\x00\x00\x00")

func clientJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsAppJs,
		"client/js/app.js",
	)
}

func clientJsAppJs() (*asset, error) {
	bytes, err := clientJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/app.js", size: 197, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsComponentsAppcontrollerviewJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x4f\x8b\xc3\x20\x10\xc5\xef\xf9\x14\xde\xda\xb2\xa0\xec\xb9\x69\xa1\xe4\xb4\xd7\xed\xb2\xd7\x45\xcc\x74\x1b\x30\x2a\xe3\xc8\x16\x42\xbe\xfb\x6a\xfe\x34\x91\x54\x02\x49\xde\xfb\x39\x3a\x6f\x9a\xd6\x59\x24\xf6\x09\x52\x11\xbb\xa1\x6d\xd9\x0e\xd3\xf7\xee\x58\x4c\xd6\x45\x53\x65\x0d\xc9\xc6\x00\x4e\x84\xd4\x24\xd6\xf2\x0a\x76\xee\x4a\x16\x61\x02\x39\x17\x3e\xfd\x7a\x31\x1b\x19\x7a\x51\xd4\x58\xe3\x17\x58\x8e\x82\x58\xbc\x85\xaf\x6c\x30\x04\x58\xd9\xd6\xcd\x1b\xc4\x4a\x8b\x60\xa1\xb4\xf4\x3e\x15\x4e\x37\x43\xab\x35\xe0\x77\x03\x7f\x0c\x1e\x04\xa6\xf6\x63\x97\x3c\xd1\xd6\x80\x21\xd6\x15\x2c\x2e\x15\x8f\x21\x0c\x2a\x5e\x6f\x7f\x98\xb4\xb4\x7c\x70\x10\x95\xe3\x20\xf4\xc5\xf0\xc2\x58\x07\x72\x0c\x81\x02\x1a\xb6\x7f\x0a\x69\x95\x59\x6a\x43\x06\xa7\x6e\xce\xa0\x3f\x67\xec\xc0\xbb\xf3\xd7\xbd\xf1\x2c\x3e\x74\x87\x6d\x0b\xa5\x70\x2f\x36\xad\x23\xb1\xe6\xc3\x28\x84\x36\xf6\x35\xc9\xa7\x8e\x62\x49\xfe\xb3\x75\x7a\x26\xf2\x6a\x65\x36\xce\xc5\xcb\x9b\x7f\x51\x29\x4b\x62\x99\x1a\x0f\xae\x96\x04\x33\x34\x37\xce\x7f\x81\xae\x14\x8d\xfd\x81\xab\xd1\x63\x6f\xec\xfd\x79\x4a\x3c\x07\x1e\xc3\xb0\x6b\xb8\xc9\xa0\x69\x1b\xc4\xb1\xf8\x0f\x00\x00\xff\xff\x15\x66\x54\x69\xb2\x02\x00\x00")

func clientJsComponentsAppcontrollerviewJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsComponentsAppcontrollerviewJs,
		"client/js/components/AppControllerView.js",
	)
}

func clientJsComponentsAppcontrollerviewJs() (*asset, error) {
	bytes, err := clientJsComponentsAppcontrollerviewJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/components/AppControllerView.js", size: 690, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsComponentsCountercompJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x3d\x6e\xc3\x30\x0c\x85\x77\x9d\x82\x5b\xd2\xc5\xe9\x1c\x27\x5e\x3c\x75\x2b\x8a\x5e\xc0\x51\x18\xd4\xa8\x4d\x0a\x14\x55\xa4\x08\x7c\xf7\x4a\xb2\xea\xda\x40\xb9\xd8\xf8\xf4\xde\x03\x7f\xfa\xd1\xb1\x28\xbc\x61\x67\x15\x6e\xc2\x23\xec\x24\xfd\xef\x6a\x63\xec\xd0\x79\x0f\x2d\x07\x52\x94\x96\x47\x07\x78\x57\xa4\xab\x9f\xe5\x55\x42\x4c\x48\x0a\x0f\x03\xb1\x2c\x93\x57\x09\x56\x59\xf6\x4f\x85\xa5\xf2\xc1\x61\x24\x75\x06\x93\xc9\x1f\x89\x39\xb8\x95\x09\x6a\x10\x82\xfd\x02\x52\x9d\x5c\x53\x1a\x80\xaf\x6e\x08\x78\x84\x87\x7e\xf4\xbe\x72\xc2\xce\x57\x76\x7e\x9a\x36\x96\x6c\xbb\x04\x55\x26\x60\x6a\x87\xde\x7e\x9e\xd7\x26\xa6\x17\xb2\x82\x63\x6c\xbc\x44\x4f\xcd\x42\x4e\x87\xd9\xd9\x6c\xbb\x38\xb8\x3f\xb0\x0c\x12\x47\x59\x2d\x27\xa7\xbf\x7f\x3b\xf4\x70\x5e\x16\x92\x5f\x8f\x65\x5f\xaf\xbf\x82\x8a\xc2\x78\x41\x31\x53\xbd\x4d\xb8\xe2\xad\x0b\x83\x26\xdd\x3f\x21\xcf\x59\x8f\xf7\x7c\xb0\x22\x5d\x5f\xa7\x36\x3f\x01\x00\x00\xff\xff\x83\xc9\xa4\xc1\xcd\x01\x00\x00")

func clientJsComponentsCountercompJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsComponentsCountercompJs,
		"client/js/components/CounterComp.js",
	)
}

func clientJsComponentsCountercompJs() (*asset, error) {
	bytes, err := clientJsComponentsCountercompJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/components/CounterComp.js", size: 461, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _clientJsStoresAppstoreJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\x4d\x4b\x03\x31\x10\xbd\xef\xaf\x98\xdb\xa6\x20\xa9\x67\x8b\x87\xa5\xf6\x26\x2a\xda\xf5\x2a\x31\x99\xd2\x40\x9a\x84\x64\x02\x82\xf4\xbf\x3b\x9b\xdd\xb5\x2b\x48\xe7\x34\x99\xf7\x91\xc7\xb3\xa7\x18\x12\x81\x72\x04\x87\x14\x4e\xd0\x4a\xb9\xe6\x47\xbb\x69\x26\xa4\x8b\xb1\xd3\x64\x83\xcf\x0b\xc2\x78\x58\x5f\x30\xe6\x37\xda\xa9\x9c\x07\xfe\x1b\x85\x84\xf0\xdd\x00\x8f\x66\x90\x52\xd1\x7c\x12\xab\xe9\x36\x0c\x1d\x6d\x96\x3a\x14\x4f\x98\xe0\x1e\x6e\x59\xff\x07\xfa\xb4\xde\x3c\xda\x4c\xe8\x31\x65\x71\xd1\x0d\x73\x54\xde\x38\xec\xa3\x51\x84\xdb\xd1\xe2\x6e\x91\x53\xf6\x2f\x0f\xdd\x7e\xf7\xb1\x7d\xee\x9f\xf6\xbb\xd7\x5f\xe9\x79\xb5\xa9\xfb\x79\xfc\xea\x1f\x17\x31\x05\x7a\x57\xae\xe0\x95\xb4\x4b\xda\xec\xc9\xae\xf8\x55\x1b\x33\x78\x50\xc5\xd5\x4e\xa5\x4e\xc8\xf6\xb5\x10\x31\x37\x73\x03\xed\xbc\xb6\x1c\xe9\x27\x00\x00\xff\xff\xeb\xf5\x7c\x26\x82\x01\x00\x00")

func clientJsStoresAppstoreJsBytes() ([]byte, error) {
	return bindataRead(
		_clientJsStoresAppstoreJs,
		"client/js/stores/AppStore.js",
	)
}

func clientJsStoresAppstoreJs() (*asset, error) {
	bytes, err := clientJsStoresAppstoreJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/js/stores/AppStore.js", size: 386, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gulpfileJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4f\x6f\xe2\x3e\x10\xbd\xf3\x29\x7c\x73\xc2\xaf\x24\x77\x7e\xda\xcb\x02\xab\x22\xb5\xb4\x2a\x74\xa5\x55\x55\x21\x93\x18\x48\x6b\x9c\xac\xed\x94\x45\x15\xdf\x7d\xc7\xff\x82\x09\xd1\xb6\x5a\x6d\x2e\x84\x99\xe7\x99\xf1\x9b\x99\x97\xb4\x8f\x5e\xe4\xb6\xe0\x0a\xf1\x32\xa7\x43\xa4\x44\x4d\x51\x3f\xed\xf5\xde\x88\x40\x9b\x9a\x55\xc8\x3d\x5f\x90\xa0\x3f\xeb\x42\xd0\x08\x6b\x33\x8e\xaf\x7a\xda\x5c\x6f\x58\xb1\x3e\x74\x42\x06\xd6\xe7\x91\x5b\xb5\x63\x0f\xb4\x62\x24\xa3\x17\x48\xed\x1b\x08\xeb\xf4\x78\x59\xd6\x02\xa0\xed\xc8\x6f\x05\x3f\xb0\x81\x75\x0e\xa4\x12\x94\xec\xfc\x89\x95\x28\xf7\x92\x0a\x53\x4f\x70\xe2\x64\xf6\xc0\x3d\x51\xd9\xd6\x95\x1d\x00\xbd\xb9\xa9\xc0\x44\xb7\xb8\x76\xc5\x8d\xaf\x49\x4e\x56\x94\x5d\xc6\xf4\x66\x0f\xcb\x29\x43\x1d\x94\x82\x19\xc7\xff\x5b\xd6\x2b\xa2\xb6\xe0\x7b\x37\xf8\xeb\xc5\xed\xcd\x10\xe1\x24\xcd\x58\x41\xb9\x4a\x0b\x9e\xd3\x5f\x89\xe6\x0b\xdb\x80\xa3\xf9\x7c\x88\x9e\x4e\x80\x4c\xca\x94\x54\x55\x02\xbf\xf8\xd9\x42\x6e\xa7\xb3\xe9\xb7\xe9\x64\xbc\xbc\x7b\x5c\x40\xac\x55\x5d\xb0\x3c\xd9\x15\x3c\x79\x91\x2e\x48\xe8\x68\x8c\xe3\xc9\x5c\x5b\xf3\x42\xaa\xc0\xb2\xfc\xfa\x38\xbd\x19\x3b\x7b\x6a\x8e\x84\xde\xf9\xc3\xc8\xfb\xa4\xc8\x9c\x67\x32\x5b\x3c\xfc\x58\xde\xdf\x4d\x67\x8b\xf0\x2e\x2f\xb6\x52\x48\xd8\x3b\xc2\xdd\x35\xaf\x89\x22\xf2\x35\xc2\x19\xa3\x84\xe3\x2b\xb4\xae\x79\xa6\x8a\x92\x47\xb1\xa3\x03\x78\x4a\xe4\x81\x67\xd1\x93\xcd\xd1\xef\xa7\x7d\xfc\x0c\xcc\x1d\xe3\x56\x84\xb2\x3a\x40\x80\x27\xf3\x72\x6d\xe8\x42\xe6\x7d\xa4\x79\x69\x81\x4d\xe3\xbb\xd2\x19\x8c\xf1\x46\xba\x2b\x89\xee\xc6\x59\x50\x1d\xa9\x0b\x08\x5d\xf1\xb8\x26\xa1\xc6\xe9\xfe\x1a\x18\x15\xd0\x62\x3f\x70\xd1\x69\x44\x23\x9b\x58\x3f\x40\x91\x28\xa8\x84\xee\x9a\x90\x01\x89\xae\xaf\xfa\x51\x82\x70\xb9\x2e\xc5\x0e\x60\x7e\xd6\x02\x77\x4e\x57\xf5\xc6\x6e\xf5\xc9\x98\x11\xc8\x3f\x44\xef\xc7\x2b\x98\xb5\xec\x95\x6c\xe8\xe8\x64\x59\xd7\x8c\xdd\x43\x3e\x69\x4f\x99\x43\xc7\xd8\xd7\x2f\xa8\xaa\x05\xf7\x57\x48\x80\x2a\x5c\x57\x39\x51\xb4\x8b\xbd\x66\xd5\x00\xb9\xaa\x79\xce\x68\x14\x37\x0e\xfd\x98\xf3\x54\x88\x52\xc0\x71\xb9\x27\x8c\x95\xfb\x89\xfe\xdb\x82\x55\x45\x45\x23\xbb\xf2\x96\x5e\x98\xd7\xb8\x0b\x63\xda\x90\x53\xa9\x2c\xcc\x4f\x64\xec\xba\x64\x2e\x5f\x72\x59\x32\x9a\xb0\x72\x13\xe1\x47\x53\x7b\x8e\x9d\xff\x18\x5f\xd6\xf9\x51\xf2\x0f\x13\xb7\x27\xd3\xad\xcc\x25\x5d\x95\x28\x33\x2a\x65\x42\xf9\x5b\x32\xbb\x1b\x4f\x96\x93\xd9\x77\x18\x12\x0c\xf6\xbc\x36\x50\xdc\x92\xb9\x7f\x32\x2c\xee\xe6\xe6\xe7\xfc\xfa\x97\x57\x0f\x95\x24\x3e\x03\x79\x39\x8c\xac\xe8\x47\xf1\x99\xbb\x8b\x1e\xa3\x23\x5d\x04\xb9\xef\x80\x5b\xda\xee\x9d\x04\x6d\x39\x6d\x64\xbb\x19\xc1\x97\x26\x60\x48\x3f\x18\xb4\x06\x14\xc8\xca\x56\x8a\xd1\x7f\xe8\xe2\x5a\x7e\xe0\xff\x5c\x7d\x57\xdd\x41\x9f\xcc\xee\x3b\x0d\x6b\xdd\xa7\xe9\xff\x99\x38\x04\x61\x72\xba\x26\x35\x53\xe7\x31\xbc\x42\x35\x87\xdc\x6b\x23\x42\x6d\xed\xfb\x7b\xf6\x3e\x79\xdb\x53\x21\x1f\xe4\x00\x29\xfc\x44\x0a\x68\x05\xd6\xdf\x2e\xdc\xe4\xf2\x61\xcf\x84\x21\x32\x6a\xe1\x13\x85\xbb\x6c\x1c\x89\x2a\xe7\xb0\x07\x7c\x13\xf9\x95\x57\xdb\x02\x36\x6a\x57\x28\x10\x1a\x6e\x16\xfd\xd8\xfb\x1d\x00\x00\xff\xff\xf1\xa0\x43\x26\xf4\x08\x00\x00")

func gulpfileJsBytes() ([]byte, error) {
	return bindataRead(
		_gulpfileJs,
		"gulpfile.js",
	)
}

func gulpfileJs() (*asset, error) {
	bytes, err := gulpfileJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gulpfile.js", size: 2292, mode: os.FileMode(420), modTime: time.Unix(1439843811, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _nodemonJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8c\x41\x0a\xc2\x30\x10\x45\xf7\x39\x45\x98\x75\xd1\xbd\x57\x11\x29\xb4\xf9\x94\x94\x76\xbe\x64\x12\x15\xc4\xbb\x3b\x9a\xce\x6a\x78\xef\xf3\xde\x21\xfa\xc9\x03\x65\xa2\x41\x2e\xb1\x96\x86\xa1\xc3\xbc\x28\xcb\x8f\x5d\x25\x65\xab\x67\x19\xa2\xcc\x5b\x86\xf6\x57\x99\x30\xee\x4c\x6d\x83\xfd\xc1\x69\xc9\xdd\x4c\x7c\xa2\x8c\x33\xf7\x3b\xd5\xd7\x6e\x6f\x47\x12\xaf\xea\x3d\x59\x2d\xae\x46\x95\xf0\x09\xdf\x00\x00\x00\xff\xff\x3a\xe7\xf2\xc8\x81\x00\x00\x00")

func nodemonJsonBytes() ([]byte, error) {
	return bindataRead(
		_nodemonJson,
		"nodemon.json",
	)
}

func nodemonJson() (*asset, error) {
	bytes, err := nodemonJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nodemon.json", size: 129, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _packageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\xcf\x8e\xdb\x20\x10\xc6\xef\x79\x0a\xe4\xc3\x9e\x9a\xa9\x71\xb2\xdb\x76\x6f\x95\xb6\xa7\x56\x7d\x81\x6e\x23\x11\x3c\x71\xd8\x62\x40\x80\xf3\x47\x51\xde\xbd\x63\x6c\x6c\xaf\xda\x93\xc5\xf7\x9b\x19\xbe\xf9\xcc\x6d\xc5\x58\x61\x44\x8b\xc5\x33\x2b\x6e\x37\xf8\xea\xdc\x4f\x3a\xdd\xef\xc5\x87\x9e\x9c\xd0\x07\x65\x4d\x0f\x39\x94\x50\x0e\x6a\x8d\x41\x7a\xe5\xe2\x48\xa8\xed\x65\x56\x72\x6b\x2b\x54\xa2\xf0\x31\xa0\xa7\x39\xe3\x07\xde\xc2\xc0\x87\x86\x40\x25\xbd\x07\x12\x22\x86\xd8\x37\xa0\x3c\x5a\xf6\x5a\x7c\xf3\xde\xfa\x67\x66\x2c\xeb\x01\x0b\x0e\xa5\x3a\x28\xac\x5f\x0b\xf6\xf0\xc0\xf0\xa2\x22\xe3\x05\x75\xde\xd3\x34\x8f\xce\x06\x15\xad\xbf\x2e\x06\x5e\x5d\x5a\xab\x51\x31\x5d\x49\x52\xe7\x75\xf2\x34\x37\xfe\xc1\xeb\xd9\xfa\xba\xf7\xf1\x6b\xa8\xa1\x75\xbe\x0f\x22\xad\x42\xd2\xef\x54\x27\xba\x78\xb4\x3e\xa7\x94\x0e\x79\x53\xad\x24\x9a\x90\x13\xfc\x31\x9c\x32\xac\xf1\xf4\x82\x0e\x4d\x8d\x46\x2a\x5c\xac\xbb\x17\x7b\xd4\xea\xd0\xfb\x2d\x76\x4f\xc0\x61\x93\x4d\xee\xbd\x3d\x53\x58\x99\x7d\xa1\xe0\x27\x56\x63\x5a\x60\xc7\xa1\x02\x9e\xc5\x83\xee\x2e\x49\xad\x96\xa5\x4d\xa7\x5d\x52\x37\xf0\x19\x38\x5f\xca\xeb\x63\x6c\xf5\x9a\x32\xd3\x42\xe2\x38\x6f\x0b\xdb\x77\x25\x21\x7a\x14\xed\x68\x82\x7e\x3d\x3c\xbe\xc3\x5d\x33\x99\xe7\x64\xbe\xcc\xd0\xee\xdf\x50\xc6\xb5\x08\x41\x35\x66\xbc\xbe\x9c\xf1\x49\x99\xab\x5e\x07\xdb\x79\x89\xe3\x15\xff\xce\x38\x8b\x28\x8f\x79\x7a\x05\x4f\x44\xa6\xff\x55\xff\x37\x4c\xa1\xd3\xd3\xd9\x95\xc0\x3f\xcd\xb9\x48\xdb\x3a\x8f\x21\xbf\xe0\xb4\xe4\x14\x0f\x5e\x12\x4b\x60\x0b\xbc\x9a\x49\x6b\x7d\x23\x72\xc7\x23\x54\x59\x27\xb3\x72\xba\x66\x03\xc3\xeb\x5b\xdd\x57\x7f\x03\x00\x00\xff\xff\x40\x56\x14\xb4\x44\x03\x00\x00")

func packageJsonBytes() ([]byte, error) {
	return bindataRead(
		_packageJson,
		"package.json",
	)
}

func packageJson() (*asset, error) {
	bytes, err := packageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.json", size: 836, mode: os.FileMode(420), modTime: time.Unix(1439832492, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _serverServerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xc1\x6e\xb3\x30\x10\x84\xef\x3c\xc5\xde\xd6\xe4\x47\x26\xc7\xe8\xaf\xf2\x0c\xad\xda\xde\x23\x0b\x56\xc1\x11\x78\xdd\xb5\x41\x3d\xe4\xe1\x6b\x07\xdc\xa0\xfa\xc6\x7c\xc3\xcc\xee\xb6\x07\xb8\x85\xc1\xba\x08\x8e\x7b\xfa\x0f\x51\x66\x82\x43\x5b\x55\x8b\x11\xa0\x6f\x2f\x14\x02\xe4\x77\x06\xa1\xaf\xd9\x0a\x29\xdc\x64\xac\x9b\x2a\x13\xe3\x3d\x94\x77\x2e\xff\xa8\x0d\x7a\x96\xf8\x84\x5e\xb8\x4b\x50\x93\x5b\xf4\xdb\xeb\xfb\x27\xdc\xef\x70\x3a\x9e\x8e\xab\x77\x62\xb9\x1a\x07\x7f\xeb\x56\xb9\xb4\x75\x3c\x3d\x0a\x2c\xbb\xbd\x69\x27\x17\xa7\x37\x71\x78\x56\xff\x3a\xb3\x8c\xf5\x4b\x55\xa5\xb9\xf5\x1c\x48\xad\xf9\x0a\xc3\x90\x66\xc5\x7a\x8f\x76\xa9\x2a\x83\xa2\x63\x8b\x4d\xd9\x54\x87\x68\xa2\xed\x54\xce\xd5\x37\xb6\x4e\x5d\x2e\xbd\x15\x67\x26\x6a\x00\xb5\x6e\x7b\x1b\x72\x6c\xc9\x1d\xd3\x27\x39\x95\x0f\x93\xa4\x8e\x5d\xe0\x91\xf4\xc8\x57\x85\x1f\xd1\x48\xa4\x1e\x02\xc9\x42\x02\x69\xc3\xc7\xf9\x10\xfe\xc1\x66\xff\x09\x00\x00\xff\xff\x6f\x82\x3e\x67\xaf\x01\x00\x00")

func serverServerJsBytes() ([]byte, error) {
	return bindataRead(
		_serverServerJs,
		"server/server.js",
	)
}

func serverServerJs() (*asset, error) {
	bytes, err := serverServerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "server/server.js", size: 431, mode: os.FileMode(420), modTime: time.Unix(1439831908, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	".jshintrc": Jshintrc,
	"client/css/app.css": clientCssAppCss,
	"client/index.html": clientIndexHtml,
	"client/js/actions/AppActions.js": clientJsActionsAppactionsJs,
	"client/js/alt.js": clientJsAltJs,
	"client/js/app.js": clientJsAppJs,
	"client/js/components/AppControllerView.js": clientJsComponentsAppcontrollerviewJs,
	"client/js/components/CounterComp.js": clientJsComponentsCountercompJs,
	"client/js/stores/AppStore.js": clientJsStoresAppstoreJs,
	"gulpfile.js": gulpfileJs,
	"nodemon.json": nodemonJson,
	"package.json": packageJson,
	"server/server.js": serverServerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{
	}},
	".jshintrc": &bintree{Jshintrc, map[string]*bintree{
	}},
	"client": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"app.css": &bintree{clientCssAppCss, map[string]*bintree{
			}},
		}},
		"index.html": &bintree{clientIndexHtml, map[string]*bintree{
		}},
		"js": &bintree{nil, map[string]*bintree{
			"actions": &bintree{nil, map[string]*bintree{
				"AppActions.js": &bintree{clientJsActionsAppactionsJs, map[string]*bintree{
				}},
			}},
			"alt.js": &bintree{clientJsAltJs, map[string]*bintree{
			}},
			"app.js": &bintree{clientJsAppJs, map[string]*bintree{
			}},
			"components": &bintree{nil, map[string]*bintree{
				"AppControllerView.js": &bintree{clientJsComponentsAppcontrollerviewJs, map[string]*bintree{
				}},
				"CounterComp.js": &bintree{clientJsComponentsCountercompJs, map[string]*bintree{
				}},
			}},
			"stores": &bintree{nil, map[string]*bintree{
				"AppStore.js": &bintree{clientJsStoresAppstoreJs, map[string]*bintree{
				}},
			}},
		}},
	}},
	"gulpfile.js": &bintree{gulpfileJs, map[string]*bintree{
	}},
	"nodemon.json": &bintree{nodemonJson, map[string]*bintree{
	}},
	"package.json": &bintree{packageJson, map[string]*bintree{
	}},
	"server": &bintree{nil, map[string]*bintree{
		"server.js": &bintree{serverServerJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

